server:
  port: 8081

spring:
  application:
    name: user management
  web:
    cors:
      allowed-origins: "http://localhost:3000,http://localhost:3001"
      allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
      allowed-headers: "Content-Type,Authorization,X-Requested-With,Accept"
---

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: user management
#<<< EDA / Topic Name
          destination: miniproject
#>>> EDA / Topic Name
          contentType: application/json
        event-out:
#<<< EDA / Topic Name
          destination: miniproject
#>>> EDA / Topic Name
          contentType: application/json

logging:
  level:
    root: INFO
    miniproject: DEBUG
    miniproject.controller: DEBUG
    org.hibernate.type: trace
    org.springframework.cloud: debug
    org.springframework.web: DEBUG


server:
  port: 8082

---

spring:
  profiles: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: user management
          destination: miniproject
          contentType: application/json
        event-out:
          destination: miniproject
          contentType: application/json


